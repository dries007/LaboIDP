/* IDP file generated by Python script...
 *
 * Galaxies (logic puzzle)
 * 
 * Rules:
 * 
 * 1) Every region should have two-way rotational symmetry,
 * 2) should contain exactly one dot which is in its centre, and
 * 3) should contain no lines separating two of its own squares from each other.
 * 4) No black holes.
 * 
 * Copyright (c) Dries007 & Laurens VDW 2019
 * 
 * Play field:
 *             11111
 *   012345678901234
 *  0┏━┯━┯━┯━┯━┯━┯━┓
 *  1┃ ┆ ┆ ┆ A ┆ ┆ ┃
 *  2┠┄┼B┼┄┼┄┼┄┼┄C┄┨
 *  3┃ ┆ ┆ ┆ ┆ ┆ ┆ ┃
 *  4┠┄┼┄┼┄┼┄┼D┼┄┼┄┨
 *  5┃ E ┆ ┆ ┆ ┆ ┆ ┃
 *  6┠┄┼┄┼┄┼┄┼┄┼┄┼┄┨
 *  7┃ ┆ ┆ ┆ ┆ ┆ ┆ ┃
 *  8┠┄F┄┼┄┼┄┼┄┼┄┼┄┨
 *  9┃ ┆ ┆ G ┆ ┆ ┆H┃
 * 10┠┄┼┄┼┄┼┄┼┄I┄┼┄┨
 * 11┃ ┆ ┆ ┆ ┆ ┆ ┆ ┃
 * 12┠┄┼┄┼┄┼┄┼┄┼┄┼┄┨
 * 13┃ J ┆ ┆ ┆ K ┆ ┃
 * 14┗━┷━┷━┷━┷━┷━┷━┛
 */
// Vocabulary Block
vocabulary V {
    type X isa nat
    type Y isa nat
    Center(X, Y)
    Walls(X, Y)
    Square(X, Y)
    BelongsTo(X, Y, X, Y)
    Size: nat
}
// Structure Block
structure S : V {
    X = {0..14}
    Y = {0..14}
    Size = 14
    Center = { (8, 1); (3, 2); (12, 2); (9, 4); (2, 5); (2, 8); (6, 9); (13, 9); (10, 10); (2, 13); (10, 13) }
}
// Theory Block
theory T : V {
    // Define a list of all "squares". (odd coordinates)
    { !x, y: Square(x, y) <- x%2=1 & y%2=1. }
    
    // Basic wall definitions
    // ----------------------
    // Walls cannot be in Square spots.
    !(x, y) in Walls: ~Square(x, y).
    // Walls cannot pass trough a center.
    !(x, y) in Walls: ~Center(x, y).
    // Every edge is a wall.
    !x: Walls(x, 0) & Walls(x, Size).
    !y: Walls(0, y) & Walls(Size, y).
    // A wall cannot be a dead end. It would subdivided a region. This translates too:
    // Every wall must have 2 or more neighbours.   X are equal, Y are +-1    OR Y are equal, X are +- 1.
    !(x1, y1) in Walls: #{x2, y2: Walls(x2, y2) & ((x1=x2 & (y1=y2-1|y1=y2+1)) | (y1=y2 & (x1=x2-1|x1=x2+1)))} >= 2.
    
    // Basic Square -> Center definitions
    // ----------------------------------
    // If its not a square, it cant belong to anything.
    !x1, y1: ~Square(x1, y1) => #{x2, y2: BelongsTo(x1, y1, x2, y2)} = 0.
    // No polygamy here.
    !(x1, y1) in Square: #{x2, y2: BelongsTo(x1, y1, x2, y2)} = 1.
    // The belong-to part must be a center.
    !(x1, y1) in Square: ?(x2, y2) in Center: BelongsTo(x1, y1, x2, y2).
    // Center ownership    
    // Case 1: Center is on a cross
    !(x, y) in Center: (x%2=0 & y%2=0) => BelongsTo(x-1, y-1, x, y) & BelongsTo(x-1, y+1, x, y) & BelongsTo(x+1, y+1, x, y) & BelongsTo(x+1, y-1, x, y).
    // Case 2: Center is on a wall in X
    !(x, y) in Center: (x%2=0 & y%2=1) => BelongsTo(x+1, y, x, y) & BelongsTo(x-1, y, x, y).
    // Case 3: Center is on a wall in Y
    !(x, y) in Center: (x%2=1 & y%2=0) => BelongsTo(x, y+1, x, y) & BelongsTo(x, y-1, x, y).
    // Case 4: Center is in a square
    !(x, y) in Center: Square(x, y) => BelongsTo(x, y, x, y).
    
    // More advanced definitions
    // -------------------------
    // Check if walls surround regions (and only between regions)
    !(x1, y1) in Square: !(cx1, cy1) in Center: BelongsTo(x1, y1, cx1, cy1) => (~BelongsTo(x1-2, y1, cx1, cy1) <=> Walls(x1-1, y1)).
    !(x1, y1) in Square: !(cx1, cy1) in Center: BelongsTo(x1, y1, cx1, cy1) => (~BelongsTo(x1+2, y1, cx1, cy1) <=> Walls(x1+1, y1)).
    !(x1, y1) in Square: !(cx1, cy1) in Center: BelongsTo(x1, y1, cx1, cy1) => (~BelongsTo(x1, y1-2, cx1, cy1) <=> Walls(x1, y1-1)).
    !(x1, y1) in Square: !(cx1, cy1) in Center: BelongsTo(x1, y1, cx1, cy1) => (~BelongsTo(x1, y1+2, cx1, cy1) <=> Walls(x1, y1+1)).
    // Check region symmetry: mirror is 2 times center minus coordinate
    !(x, y) in Square: !(cx, cy) in Center: BelongsTo(x, y, cx, cy) <=> BelongsTo(2*cx-x, 2*cy-y, cx, cy).
    
    
    // todo: Check region continuity
    // !(x1, y1) in Square: !(cx1, cy1) in Center: BelongsTo(x1, y1, cx1, cy1) => ().
    
    
}
// Default main
procedure main() {
    stdoptions.nbmodels = 5
    printmodels(modelexpand(T,S))
}

/* IDP Output
-=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=-
(Reading from stdin)
Warning: Verifying and/or autocompleting structure S
Warning: Consistency cannot be checked for functions over an infinite domain.
Warning: Derived sort X for variable x2. At 
Warning: Derived sort Y for variable y2. At 
Number of models: 1
Model 1
=======
structure  : V {
  X = { 0..14 }
  Y = { 0..14 }
  BelongsTo = { 1,1,3,2; 1,3,3,2; 1,5,2,5; 1,7,2,8; 1,9,2,8; 1,11,6,9; 1,13,2,13; 3,1,3,2; 3,3,3,2; 3,5,2,5; 3,7,2,8; 3,9,2,8; 3,11,6,9; 3,13,2,13; 5,1,3,2; 5,3,3,2; 5,5,6,9; 5,7,6,9; 5,9,6,9; 5,11,6,9; 5,13,6,9; 7,1,8,1; 7,3,9,4; 7,5,6,9; 7,7,6,9; 7,9,6,9; 7,11,6,9; 7,13,6,9; 9,1,8,1; 9,3,9,4; 9,5,9,4; 9,7,6,9; 9,9,10,10; 9,11,10,10; 9,13,10,13; 11,1,12,2; 11,3,12,2; 11,5,9,4; 11,7,6,9; 11,9,10,10; 11,11,10,10; 11,13,10,13; 13,1,12,2; 13,3,12,2; 13,5,13,9; 13,7,13,9; 13,9,13,9; 13,11,13,9; 13,13,13,9 }
  Center = { 2,5; 2,8; 2,13; 3,2; 6,9; 8,1; 9,4; 10,10; 10,13; 12,2; 13,9 }
  Square = { 1,1; 1,3; 1,5; 1,7; 1,9; 1,11; 1,13; 3,1; 3,3; 3,5; 3,7; 3,9; 3,11; 3,13; 5,1; 5,3; 5,5; 5,7; 5,9; 5,11; 5,13; 7,1; 7,3; 7,5; 7,7; 7,9; 7,11; 7,13; 9,1; 9,3; 9,5; 9,7; 9,9; 9,11; 9,13; 11,1; 11,3; 11,5; 11,7; 11,9; 11,11; 11,13; 13,1; 13,3; 13,5; 13,7; 13,9; 13,11; 13,13 }
  Walls = { 0,0; 0,1; 0,2; 0,3; 0,4; 0,5; 0,6; 0,7; 0,8; 0,9; 0,10; 0,11; 0,12; 0,13; 0,14; 1,0; 1,4; 1,6; 1,10; 1,12; 1,14; 2,0; 2,4; 2,6; 2,10; 2,12; 2,14; 3,0; 3,4; 3,6; 3,10; 3,12; 3,14; 4,0; 4,4; 4,5; 4,6; 4,7; 4,8; 4,9; 4,10; 4,12; 4,13; 4,14; 5,0; 5,4; 5,14; 6,0; 6,1; 6,2; 6,3; 6,4; 6,14; 7,0; 7,2; 7,4; 7,14; 8,0; 8,2; 8,4; 8,5; 8,6; 8,8; 8,9; 8,10; 8,11; 8,12; 8,13; 8,14; 9,0; 9,2; 9,6; 9,8; 9,12; 9,14; 10,0; 10,1; 10,2; 10,3; 10,4; 10,6; 10,8; 10,12; 10,14; 11,0; 11,4; 11,6; 11,8; 11,12; 11,14; 12,0; 12,4; 12,5; 12,6; 12,7; 12,8; 12,9; 12,10; 12,11; 12,12; 12,13; 12,14; 13,0; 13,4; 13,14; 14,0; 14,1; 14,2; 14,3; 14,4; 14,5; 14,6; 14,7; 14,8; 14,9; 14,10; 14,11; 14,12; 14,13; 14,14 }
  Size = 14
}


-=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=--=#=-
Solution:
Inner Walls: {(4, 7), (8, 13), (4, 8), (13, 4), (12, 12), (9, 8), (10, 6), (8, 9), (12, 5), (4, 12), (1, 6), (2, 12), (6, 2), (8, 4), (10, 3), (8, 5), (7, 2), (12, 9), (10, 8), (4, 9), (12, 13), (3, 10), (4, 4), (10, 2), (12, 6), (8, 10), (10, 12), (4, 13), (6, 3), (3, 6), (1, 10), (8, 6), (12, 10), (4, 10), (6, 4), (2, 6), (5, 4), (8, 2), (11, 4), (10, 4), (4, 5), (11, 6), (12, 7), (8, 11), (1, 4), (2, 10), (12, 11), (10, 1), (9, 6), (11, 12), (3, 12), (4, 6), (1, 12), (8, 12), (9, 2), (11, 8), (6, 1), (7, 4), (12, 4), (8, 8), (3, 4), (2, 4), (9, 12), (12, 8)}
Mapping Center -> Square:
{(2, 5): {(1, 5), (3, 5)},
 (2, 8): {(3, 7), (3, 9), (1, 9), (1, 7)},
 (2, 13): {(1, 13), (3, 13)},
 (3, 2): {(1, 3), (3, 3), (3, 1), (5, 1), (1, 1), (5, 3)},
 (6, 9): {(9, 7), (5, 9), (11, 7), (5, 5), (5, 11), (5, 7), (7, 13), (5, 13), (3, 11), (7, 7), (7, 5), (7, 11), (1, 11), (7, 9)},
 (8, 1): {(9, 1), (7, 1)},
 (9, 4): {(7, 3), (9, 3), (9, 5), (11, 5)},
 (10, 10): {(9, 11), (9, 9), (11, 9), (11, 11)},
 (10, 13): {(9, 13), (11, 13)},
 (12, 2): {(13, 1), (11, 1), (11, 3), (13, 3)},
 (13, 9): {(13, 13), (13, 5), (13, 7), (13, 9), (13, 11)}}
Grid:
            11111
  012345678901234
 0┏━┯━┯━┳━┯━┳━┯━┓
 1┃b┆b┆b┃aAa┃c┆c┃
 2┠┄┼B┼┄╊━┿━╉┄C┄┨
 3┃b┆b┆b┃d┆d┃c┆c┃
 4┣━┿━╈━╇━╅D╄━╈━┫
 5┃eEe┃g┆g┃d┆d┃h┃
 6┣━┿━╉┄┼┄╄━┿━╉┄┨
 7┃f┆f┃g┆g┆g┆g┃h┃
 8┠┄F┄╂┄┼┄╆━┿━╉┄┨
 9┃f┆f┃gGg┃i┆i┃H┃
10┣━┿━╃┄┼┄╂┄I┄╂┄┨
11┃g┆g┆g┆g┃i┆i┃h┃
12┣━┿━╅┄┼┄╊━┿━╉┄┨
13┃jJj┃g┆g┃kKk┃h┃
14┗━┷━┻━┷━┻━┷━┻━┛

Valid: True
*/
